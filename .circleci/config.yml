version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy enviroment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl -H "token:d5ca20be-af73-4608-a298-ee5f8c184965" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i && npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i && npm run test
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/backend-ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
              #      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2e:99:4a:21:39:39:02:dc:a4:cb:ee:9b:37:d6:cf:85"]
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            #      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            touch migrations.txt
            npm i
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migrations.txt
            then
            curl -H "Content-Type: text/plain" -H "token:d5ca20be-af73-4608-a298-ee5f8c184965" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
            curl -H "Content-Type: text/plain" -H "token:d5ca20be-af73-4608-a298-ee5f8c184965" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            # - revert-migrations      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt) #            BACKEND_IP=$(tail -n 1 inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
            #      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["2e:99:4a:21:39:39:02:dc:a4:cb:ee:9b:37:d6:cf:85"]
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
            #      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
            #      - add_ssh_keys:
            #          fingerprints: ["2e:99:4a:21:39:39:02:dc:a4:cb:ee:9b:37:d6:cf:85"]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
                  #            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt) #            BACKEND_IP=$(tail -n 1 inventory.txt) #            BACKEND_IP=$(curl -H "${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend-${CIRCLE_WORKFLOW_ID:0:7})
                  #            echo $BACKEND_IP
                  #            BACKEND_URL=$(curl http://${BACKEND_IP}:3030/api/status)
                  #            echo $BACKEND_URL
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            echo "Printing Backend Url"
            echo $(sed -n 2p .circleci/ansible/inventory.txt)
            echo "Curling > $(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status"
            curl http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status
            if curl -s http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status
            then
              exit 0
            else
              exit 1
            fi
                      #            if $($BACKEND_URL | grep "\"status\":\"ok\"" )
                  #            if curl -s http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status
                  #            then
                  #              return 0
                  #            else
                  #              return 1
                  #            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-central-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
            #      - destroy-environment

      # Here's where you will add some code to rollback on failure  

#  cloudfront-update:
#      docker:
      # Docker image here that supports AWS CLI
#    steps:
      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#       - run:
#          name: Update cloudfront distribution
#          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
            #      - build-frontend
            #      - build-backend
        #      - test-frontend:
        #          requires: [build-frontend]
        #      - test-backend:
        #          requires: [build-backend]
        #      - scan-backend:
        #          requires: [build-backend]
        #      - scan-frontend:
        #          requires: [build-frontend]
      - deploy-infrastructure #:
              #          requires: [test-backend, scan-frontend, scan-backend]
              #                  filters:
              #                    branches:
              #                      only: [test-feature-branch]
              #                        - master
      - configure-infrastructure :
          requires: [deploy-infrastructure]
      - run-migrations :
          requires: [configure-infrastructure]
      - deploy-frontend :
          requires: [run-migrations]
      - deploy-backend :
          requires: [run-migrations]
      - smoke-test :
          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
